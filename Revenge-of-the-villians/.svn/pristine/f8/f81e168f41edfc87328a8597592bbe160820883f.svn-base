/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Personajes;

import Engine.Camara;
import Engine.Colisiones;
import Engine.IColisionable;
import org.newdawn.slick.GameContainer;
import org.newdawn.slick.Graphics;
import org.newdawn.slick.SlickException;
import org.newdawn.slick.tiled.TiledMap;

/**
 *
 * @author Roberto
 */
public abstract class Personaje implements IColisionable {

    protected float vida;
    protected float posX;
    protected float posY;

    protected float velocidadX = 0;
    protected float velocidadY = 0;
    protected float maxVelocidadD = 6;
    protected float maxVelocidadI = -6;
    protected float velocidadSalto = 10;

    protected float grav = 0.8f;
    protected int delta, cont_vida;
    private boolean saltando = false;
    private float tiempoSalto = 10;
    private boolean puedeSaltar = false;

    protected GameContainer container;
    protected Colisiones colisiones;

    // declara botones
    protected boolean botonIzquierda;
    protected boolean botonDerecha;
    protected boolean botonArriba;

    protected boolean[][] bloqueadoDerecha;
    protected boolean[][] bloqueadoIzquierda;
    protected boolean[][] bloqueadoArriba;
    protected boolean[][] bloqueadoAbajo;

    protected boolean conectadoSuelo = false;
    protected boolean conectadoIzquierda = false;
    protected boolean conectadoDerecha = false;
    protected boolean conectadoTecho = false;

    //Es el ancho y alto en pixeles del sprite
    protected float anchoSprite;
    protected float altoSprite;
    //Es el tama√±o (ancho y alto en pixeles) en el que se va a dibujar en pantalla 
    protected float anchoDibujado;
    protected float altoDibujado;

    protected TiledMap map;

    public Personaje(GameContainer container, Colisiones colisiones) {

        this.container = container;
        this.colisiones = colisiones;
        bloqueadoDerecha = colisiones.getBloqueadoDerecha();
        bloqueadoIzquierda = colisiones.getBloqueadoIzquierda();
        bloqueadoArriba = colisiones.getBloqueadoArriba();
        bloqueadoAbajo = colisiones.getBloqueadoAbajo();
        map = colisiones.getMap();

    }

    public void update(int delta) throws SlickException {

        //creando variables para las colisiones...
        this.delta = delta;
        /*
        
        System.out.println("velocidad x = "+ velocidadX);
        System.out.println("velocidad y = "+ velocidadY);*/
        
        //Comprueba colisiones solo si el jugador esta dentro de los limites del mapa
        //para que no provoque una excepcion de indexOutOfBounds en el array
        if((posY+altoDibujado+velocidadY)<(map.getHeight()*map.getTileHeight())){
            conectadoDerecha = bloqueadoIzquierda   [(int)(posX+anchoDibujado+velocidadX)/map.getTileWidth()][(int)(posY+ altoDibujado+velocidadY-1)/map.getTileHeight()]
                    || bloqueadoIzquierda[(int)(posX+anchoDibujado+velocidadX)/map.getTileWidth()][(int)(posY+ velocidadY)/map.getTileHeight()];

            conectadoIzquierda = bloqueadoDerecha   [(int)(posX + velocidadX) / map.getTileWidth()][(int) (posY+ altoDibujado+velocidadY-1) / map.getTileHeight()]||
                     bloqueadoDerecha[(int) (posX+velocidadX) / map.getTileWidth()][(int) (posY+ velocidadY) / map.getTileHeight()];

            conectadoSuelo = bloqueadoArriba[((int)(posX+anchoDibujado)/map.getTileWidth())-1][(int)(posY+altoDibujado+velocidadY)/map.getTileHeight()]
                || bloqueadoArriba[((int)(posX)/map.getTileWidth())+1][(int)(posY+altoDibujado+velocidadY)/map.getTileHeight()];      
            conectadoTecho = (bloqueadoAbajo[((int)(posX+anchoDibujado)/map.getTileWidth())-1][(int)(posY)/map.getTileHeight()] 
                || bloqueadoAbajo[(int)(posX)/map.getTileWidth()][(int)(posY)/map.getTileHeight()]);
        }
        
        acciones();

        posX += velocidadX;

        // pulsando botones.......
        if (botonDerecha) {
            velocidadX += 0.5;
            if (velocidadX >= maxVelocidadD) {
                velocidadX = maxVelocidadD;
            }
        }

        if (botonIzquierda) {
            velocidadX -= 0.5;
            if (velocidadX <= maxVelocidadI) {
                velocidadX = maxVelocidadI;
            }
        }

        if ((botonIzquierda && botonDerecha) || (!botonIzquierda && !botonDerecha)) {
            velocidadX = 0;
        }

        if (botonArriba) {
            if (puedeSaltar) {
                saltando = true;
            }

        }

        //esta parte del codigo es la gravedad y colision del personaje
        if (conectadoDerecha) {

            while (!conectadoDerecha) {
                posX += Math.signum(velocidadX);

            }
            if (botonDerecha) {
                velocidadX = 0;
            }

        }
        if (conectadoIzquierda) {
            while (!conectadoIzquierda) {
                posX += Math.signum(velocidadX);

            }
            if (botonIzquierda) {
                velocidadX = 0;
            }
        }

        if (conectadoSuelo) {
            puedeSaltar = true;
            while (!conectadoSuelo) {
                posY += Math.signum(velocidadY);
            }
            velocidadY = 0;
        } else {
            velocidadY += grav;
        }

        if (saltando) {
            puedeSaltar = false;
            if (conectadoTecho) {
                velocidadY = +6;
                saltando = false;
                tiempoSalto = 0;

            } else {
                velocidadY = -velocidadSalto;

            }
            posY += velocidadY;

            tiempoSalto -= 1;
            if (tiempoSalto <= 0) {
                tiempoSalto = 10;
                saltando = false;

            }
        }
 
        posY += velocidadY;
        
        //RECUPERAR VIDA PERDIDA PASADO UN TIEMPO        
        if (vida<75 && vida > 2){
        cont_vida++;
                if (cont_vida > 25){
                    vida++;
                    cont_vida=0;
                }
        }
    }

    public float getPosX() {
        return posX;
    }

    public void setPosX(float posX) {
        this.posX = posX;
    }

    public float getPosY() {
        return posY;
    }

    public void setPosY(float posY) {
        this.posY = posY;
    }

    public float getAnchoSprite() {
        return anchoSprite;
    }

    public float getAltoSprite() {
        return altoSprite;
    }

    public boolean isConectado() {
        return conectadoSuelo;
    }

    public float getVida() {
        return vida;
    }

    public void setVida(int vida) {
        this.vida = vida;
    }

    

    public void setColisiones(Colisiones colisiones) {
        this.colisiones = colisiones;
        bloqueadoDerecha = colisiones.getBloqueadoDerecha();
        bloqueadoIzquierda = colisiones.getBloqueadoIzquierda();
        bloqueadoArriba = colisiones.getBloqueadoArriba();
        bloqueadoAbajo = colisiones.getBloqueadoAbajo();
        map = colisiones.getMap();
    }

    public abstract void acciones() throws SlickException;

    public abstract void render(int delta, Graphics g, Camara camara) throws SlickException;
}
