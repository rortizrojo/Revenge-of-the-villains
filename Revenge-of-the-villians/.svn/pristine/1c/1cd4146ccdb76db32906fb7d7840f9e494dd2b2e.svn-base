/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Objetos;

import Armas.Punto;
import Armas.SpriteMovil;
import Armas.Vector;
import Engine.GestorColision;
import Engine.IColisionable;
import org.newdawn.slick.Animation;
import org.newdawn.slick.SlickException;
import org.newdawn.slick.SpriteSheet;
import org.newdawn.slick.geom.Rectangle;
import org.newdawn.slick.geom.Shape;

/**
 *
 * @author Usuario
 */
public class Lava implements IColisionable {

    
    private Rectangle areaColision; 
    private SpriteSheet sheetLava;
    private Animation animationLava;
    private Animation animationLava1;
    private float anchoSprite;
    private float altoSprite;
    private float anchoDibujado;
    private float altoDibujado;
    private int numeroFrames;
    private float posPuertaX;
    private float posPuertaY;
    private float posIniX;
    private float posIniY;
    private GestorColision gestor;
    private float prueba;
        
    public Lava(float x, float y, float velocidad, GestorColision gestor) throws SlickException{
        
    
        this.posPuertaX = x;
        this.posPuertaY = y;
       //x =1100 -+50 Y= 1300
       prueba= posPuertaX;
        anchoSprite = 50;
        altoSprite = 50;
        anchoDibujado = anchoSprite *1f;
        altoDibujado = altoSprite *1f;
      
        animationLava = new Animation();
        animationLava1 = new Animation();
        sheetLava = new SpriteSheet("res/animations/lava.png", (int) anchoSprite, (int) altoSprite);
        animationLava = new Animation();
        
        numeroFrames = 2;
         for (int i = 0; i < 4; i++) {
            animationLava.addFrame(sheetLava.getSprite(i, 0), 150);
           
        }
           for (int i = 3; i >= 0; i--) {
            animationLava1.addFrame(sheetLava.getSprite(i, 0), 150);
        }
        areaColision = new Rectangle(x,y,anchoDibujado,altoDibujado);
        gestor.registrarCuerpo(this);
    }
    
    public void setPosicion(float x, float y){
        posPuertaX = x;
        posPuertaY = y;    
    }
       
    public void draw(){
       
            if (posPuertaX%200==0){
              animationLava.draw(posPuertaX, posPuertaY, anchoDibujado, altoDibujado);
              
            }else {
             animationLava1.draw(posPuertaX, posPuertaY, anchoDibujado, altoDibujado);   
            }
             
             
           
        }
 
    public void update(int delta){

        animationLava.update(delta);
        sincronizarArea();
        
    }
            
    @Override
    public Shape getAreaColision() {
        return areaColision;
    }

    @Override
    public void alColisionar(IColisionable colision) {
      
    }

    @Override
    public void sincronizarArea() {
        areaColision.setX(posPuertaX);
        areaColision.setY(posPuertaY);
    }
    
}
